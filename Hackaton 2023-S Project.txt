//all the libraries Defining 
#include <Wire.h>  // for other one wired sensor
#include "DHT.h"  // Temperature and Humidity sensor
#include <WiFi.h> // Wifi connectivity
#include "ESPAsyncWebServer.h" // For Web-Server
#include <OneWire.h>// for oneWire operation
#include <DallasTemperature.h> // body temperature sensor
#include "MAX30105.h" //For Pluse Oximeter sensor
#include "spo2_algorithm.h"
#include <AsyncTCP.h>
MAX30105 particleSensor;//Defining type of sensor
#define MAX_BRIGHTNESS 255 //Defining the brightness of led

// Wifi network credentials
const char* ssid = "Shahebaz";
const char* password = "khangsm123";

//AS we using Dht11 version of sensor
//#define DHTTYPE DHT11 // DHT 11
#define DHTTYPE DHT11 
uint8_t DHTPin = 5; // Dht11 Sensor is Connected on Gpio Pin NUMBER 5
const int SensorDataPin = 18;  // dallas temperature sensor is Connected on Gpio Pin Number 18
DHT dht(DHTPin, DHTTYPE);
OneWire oneWire(SensorDataPin);
DallasTemperature sensors(&oneWire);
//Declaring variables for max30102 Sensor
uint32_t irBuffer[100]; //infrared LED sensor data
uint32_t redBuffer[100];  //red LED sensor data
int32_t bufferLength; //data length
int32_t spo2; //SPO2 value
int8_t validSPO2; //indicator to show if the SPO2 calculation is valid
int32_t heartRate; //heart rate value
int8_t validHeartRate; //indicator to show if the heart rate calculation is valid
byte pulseLED = 11; //Must be on PWM pin
byte readLED = 13; //Blinks with each data read
//Declaration of Variables for dht11 sensor
float temperature_Celsius;
float temperature_Fahrenheit;
float Humidity;
//Declaration of variables for body temperature sensor
float Btemperature_Celsius;
float Btemperature_Fahrenheit;
 // last time SSE
long last_sse = 0;

// Calling Web-Server Function
AsyncWebServer server(80);
AsyncEventSource events("/events");

//Defining Responces time
unsigned long lastTime = 0;  
unsigned long timerDelay = 2000;  // send readings timer

//Function for Dht11 Sensor
void getDHTReadings(){
 
   Humidity = dht.readHumidity();
  // Read temperature as Celsius (the default)
  temperature_Celsius = dht.readTemperature();
  // Read temperature as Fahrenheit (isFahrenheit = true)
  temperature_Fahrenheit= dht.readTemperature(true);
}

//Function for DS18B20 sensor
void getDS18B20Readings(){
 
  sensors.requestTemperatures(); 
  Btemperature_Celsius = sensors.getTempCByIndex(0);
  Btemperature_Fahrenheit = sensors.getTempFByIndex(0);
}


//Calling HTml file in the form of String
String processor(const String& var){
  getDHTReadings();
  //Serial.println(var);
  if(var == "TEMPERATURE_C"){
    return String(temperature_Celsius);
  }
  else if(var == "TEMPERATURE_F"){
    return String(temperature_Fahrenheit);
  }
   else if(var == "HUMIDITY"){
    return String(Humidity);
  }
  
  getDS18B20Readings();
  //Serial.println(var);
  if(var == "BTEMPERATURE_C"){
    return String(Btemperature_Celsius);
  }\
  else if(var == "BTEMPERATURE_F"){
    return String(Btemperature_Fahrenheit);
  }
    
if(var == "HEARTRATE"){
    return String(heartRate);
  }\
  else if(var == "SPO"){
    return String(spo2);
  }    
}

const char index_html[] PROGMEM = R"rawliteral(
 <!DOCTYPE html>
<html lang="en">
<head>
  <title>health monitoring system</title>
  <meta charset="utf-8">
  <meta http-equiv="refresh" content="3">  
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.2/css/all.css" integrity="sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr" crossorigin="anonymous">
  <link rel="icon" href="data:,">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
  <style>
  .fakeimg {
    height: 200px;
    background: #aaa;
  }
  .foot{
    background-color: rgb(13, 13, 117);
  }
  html {
    font-family: Arial; display: inline-block; text-align: center;}
    p {  font-size: 1.2rem;}
    body {  margin: 0;}
    /* .topnav { overflow: hidden; background-color: #4B1D3F; color: white; font-size: 1.7rem; } */
    .content { padding: 20px; }
    .card { background-color: white; box-shadow: 2px 2px 12px 1px rgba(140,140,140,.5); }
    .cards { max-width: 700px; margin: 0 auto; display: grid; grid-gap: 2rem; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); }
    .reading { font-size: 2.8rem; }
    .card.temperature { color: #0e7c7b; }
    .card.humidity { color: #17bebb; }
    @media screen and (max-width:800px) {
      .float-start{
        width:68;
         height:90;
     }      
    }

  </style>
</head>
<body>

<div class="p-5 foot text-white text-center">
  <img src="https://www.shahucollegelatur.org.in/img/rsmlogo.png" width="150" height="200" class="float-start">
  <p>Department Of Information Technology Organizes</p> 
  <h1>RSM-HACKATON S-23</h1>
  <h6>Shiv Chhartarpati Shikshan Sansthan's</h6>
  <p>RAJARSHI SHAHU MAHAVIDYALAYA (AUTONOMOUS) LATUR - 413512</p> 
</div>

<nav class="navbar navbar-expand-sm bg-dark navbar-dark">
  <div class="container-fluid">
    <ul class="navbar-nav">
      <li class="nav-item">
        <a class="nav-link active" href="#">Home</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="#">About</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="#">Refrence</a>
      </li>
      <li class="nav-item">
        <a class="nav-link disabled" href="#">support</a>
      </li>
    </ul>
  </div>
</nav>


  <div class="content">
    <div class="cards">
      <div class="card temperature">
        <h4><i class="fas fa-thermometer-half"></i> ROOM TEMPERATURE</h4><p><span class="reading"><span id="temp_celcius">%TEMPERATURE_C%</span> &deg;C</span></p>
      </div>
      <div class="card temperature">
        <h4><i class="fas fa-thermometer-half"></i> ROOM TEMPERATURE</h4><p><span class="reading"><span id="temp_fahrenheit">%TEMPERATURE_F%</span> &deg;F</span></p>
      </div>
      <div class="card humidity">
        <h4><i class="fas fa-tint"></i> ROOM HUMIDITY</h4><p><span class="reading"><span id="hum">%HUMIDITY%</span> &percnt;</span></p>
      </div>
    </div>    
  </div>

  <div class="content">
    <div class="cards">
      <div class="card temperature">
        <h4><i class="fas fa-thermometer-half"></i> BODY TEMPERATURE</h4><p><span class="reading"><span id="Btemp_celcius">%BTEMPERATURE_C%</span> &deg;C</span></p>
      </div>
      <div class="card temperature">
        <h4><i class="fas fa-thermometer-half"></i> BODY TEMPERATURE</h4><p><span class="reading"><span id="Btemp_fahrenheit">%BTEMPERATURE_F%</span> &deg;F</span></p>
      </div>
    </div>
  </div>  

  <div class="content">
    <div class="cards">
      <div class="card temperature">
        <h4><i class="fa fa-tint"></i> HEART RATE</h4><p><span class="reading"><span id="heartRate">%HEARTRATE%</span> BPM</span></p>
      </div>
      <div class="card temperature">
        <h4><i class="fa fa-tint"></i> SPO2</h4><p><span class="reading"><span id="spo2">%SPO%</span> %</span></p>
      </div>
    </div>
  </div>

<div class="mt-5 p-4 foot text-white text-center">
  <p>BY - PATHAN SHAHEBAZ AJMER</p>
</div>

<script>
    if (!!window.EventSource) {
     var source = new EventSource('/events');
     
     source.addEventListener('open', function(e) {
      console.log("Events Connected");
     }, false);
     source.addEventListener('error', function(e) {
      if (e.target.readyState != EventSource.OPEN) {
        console.log("Events Disconnected");
      }
     }, false);
     
     source.addEventListener('message', function(e) {
      console.log("message", e.data);
     }, false);
     
    //Calling the function of dht11
    
     source.addEventListener('temperature_Celsius', function(e) {
      console.log("temperature", e.data);
      document.getElementById("temp_celcius").innerHTML = e.data;
     }, false);
     
     source.addEventListener('temperature_Fahrenheit', function(e) {
      console.log("temperature", e.data);
      document.getElementById("temp_fahrenheit").innerHTML = e.data;
     }, false);
     source.addEventListener('humidity', function(e) {
      console.log("humidity", e.data);
      document.getElementById("hum").innerHTML = e.data;
     }, false); 
    }
     //Calling the Function of Body temperature sensor
     
     source.addEventListener('Btemperature_Celsius', function(e) {
      console.log("temperature", e.data);
      document.getElementById("Btemp_celcius").innerHTML = e.data;
     }, false);
     
     source.addEventListener('Btemperature_Fahrenheit', function(e) {
      console.log("temperature", e.data);
      document.getElementById("Btemp_fahrenheit").innerHTML = e.data;
     }, false);
      
      //Calling of max30102 sensor
       source.addEventListener('spo2', function(e) {
      console.log("spo2", e.data);
      document.getElementById("spo2").innerHTML = e.data;
     }, false);
      
       source.addEventListener('heartRate', function(e) {
      console.log("heartRate", e.data);
      document.getElementById("heartRate").innerHTML = e.data;
     }, false);           
    
    </script>
</body>
</html>
)rawliteral";

void setup() {
  Serial.begin(115200);
  pinMode(DHTPin, INPUT);
  
  pinMode(pulseLED, OUTPUT);
  pinMode(readLED, OUTPUT);
  // Initialize sensor
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) //Use default I2C port, 400kHz speed
  {
    Serial.println(F("MAX30105 was not found. Please check wiring/power."));
    while (1);
  }
 
  byte ledBrightness = 60; //Options: 0=Off to 255=50mA
  byte sampleAverage = 4; //Options: 1, 2, 4, 8, 16, 32
  byte ledMode = 2; //Options: 1 = Red only, 2 = Red + IR, 3 = Red + IR + Green
  byte sampleRate = 100; //Options: 50, 100, 200, 400, 800, 1000, 1600, 3200
  int pulseWidth = 411; //Options: 69, 118, 215, 411
  int adcRange = 4096; //Options: 2048, 4096, 8192, 16384
 
  particleSensor.setup(ledBrightness, sampleAverage, ledMode, sampleRate, pulseWidth, adcRange); //Configure sensor with these settings
  dht.begin();
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Setting as a Wi-Fi Station..");
  }
  Serial.print("Station IP Address: ");
  Serial.println(WiFi.localIP());
  Serial.println();

  
  // Handle Web Server
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", index_html, processor);
  });

  // Handle Web Server Events
  events.onConnect([](AsyncEventSourceClient *client){
    if(client->lastId()){
      Serial.printf("Client reconnected! Last message ID that it got is: %u\n", client->lastId());
    }
    // send event with message "hello!", id current millis
    // and set reconnect delay to 1 second
    client->send("hello!", NULL, millis(), 10000);
  });
  server.addHandler(&events);
  server.begin();
}

void loop() {
  bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
  //read the first 100 samples, and determine the signal range
  for (byte i = 0 ; i < bufferLength ; i++)
  {
    while (particleSensor.available() == false) //do we have new data?
      particleSensor.check(); //Check the sensor for new data
    redBuffer[i] = particleSensor.getRed();
    irBuffer[i] = particleSensor.getIR();
    particleSensor.nextSample(); //We're finished with this sample so move to next sample
   //Serial.print(F("red="));
   // Serial.print(redBuffer[i], DEC);
   // Serial.print(F(", ir="));
   // Serial.println(irBuffer[i], DEC);
  }
  //calculate heart rate and SpO2 after first 100 samples (first 4 seconds of samples)
  maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
  //Continuously taking samples from MAX30102.  Heart rate and SpO2 are calculated every 1 second
  while (1)
  {
    //dumping the first 25 sets of samples in the memory and shift the last 75 sets of samples to the top
    for (byte i = 25; i < 100; i++)
    {
      redBuffer[i - 25] = redBuffer[i];
      irBuffer[i - 25] = irBuffer[i];
    }
    //take 25 sets of samples before calculating the heart rate.
    for (byte i = 75; i < 100; i++)
    {
      while (particleSensor.available() == false) //do we have new data?
        particleSensor.check(); //Check the sensor for new data
      digitalWrite(readLED, !digitalRead(readLED)); //Blink onboard LED with every data read
      redBuffer[i] = particleSensor.getRed();
      irBuffer[i] = particleSensor.getIR();
     
      particleSensor.nextSample(); //We're finished with this sample so move to next sample
    }
    if (millis() - last_sse > 2000) if ((millis() - lastTime) > timerDelay) {
      // FOR selerial monitioning DHT11    
    getDHTReadings();
    Serial.printf("ROOM Temperature = %.2f ºC \n", temperature_Celsius);
    Serial.printf("ROOM Temperature = %.2f ºF \n", temperature_Fahrenheit);
    Serial.printf("ROOM Humidity= %f %\n", Humidity);
   

    // FOR selerial monitioning body temperature
    getDS18B20Readings();
    Serial.printf("BODY Temperature = %.2f ºC \n", Btemperature_Celsius);
    Serial.printf("BODY Temperature = %.2f ºF \n", Btemperature_Fahrenheit);
    
    
    // Send Events to the Web Server with the  DHT11 Sensor Readings
    events.send("ping",NULL,millis());
    events.send(String(temperature_Celsius).c_str(),"temperature_Celsius",millis());
    events.send(String(temperature_Fahrenheit).c_str(),"temperature_Fahrenheit",millis());
    events.send(String(Humidity).c_str(),"humidity",millis());

    // Send Events to the Web Server with the  BODY TEMPERATURE Sensor Readings
    events.send("ping",NULL,millis());
    events.send(String(Btemperature_Celsius).c_str(),"Btemperature_Celsius",millis());
    events.send(String(Btemperature_Fahrenheit).c_str(),"Btemperature_Fahrenheit",millis());
    
    lastTime = millis();
      
      if (validSPO2 == 1) {
        events.send(String(spo2).c_str(), "spo2", millis());
        Serial.print(F("SPO2="));
        Serial.println(spo2, DEC);
      }
      if (validHeartRate == 1) {
         events.send(String(heartRate).c_str(), "hr", millis());
         Serial.print(F("Heart Rate="));
         Serial.println(heartRate, DEC); 
         Serial.println();        
      }
      last_sse = millis();
    }
    
    //After gathering 25 new samples recalculate HR and SP02
    maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
  }
}
// <img src="https://www.shahucollegelatur.org.in/img/rsmlogo.png" width="150" height="200" class="float-start">